name: packages

on:
  push:
    tags: [ "v*.*.*" ]      # publication officielle
  workflow_dispatch: {}     # exécution manuelle (n’attache pas à une Release)

permissions:
  contents: write           # nécessaire pour attacher aux Releases

env:
  RUST_TOOLCHAIN: "1.86.0"

jobs:
  deb:
    name: Build .deb (Ubuntu) + lint + SBOM + checksums
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install build & lint deps
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            pkg-config libssl-dev gcc make ruby-full rubygems ca-certificates \
            jq curl file lintian
          sudo gem install --no-document fpm

      - name: Install Rust ${{ env.RUST_TOOLCHAIN }}
        run: |
          curl -sSf https://sh.rustup.rs | sh -s -- -y --profile minimal --default-toolchain ${RUST_TOOLCHAIN}
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          rustc -V && cargo -V

      - name: Build shai (release)
        run: |
          cargo build --release -p shai-cli
          file target/release/shai

      - name: Compute version
        id: v
        run: |
          V=$(cargo metadata --format-version 1 | jq -r '.packages[] | select(.name=="shai-cli") | .version')
          echo "version=$V" >> "$GITHUB_OUTPUT"

      - name: Stage files
        run: |
          mkdir -p pkgroot/usr/bin pkgroot/usr/share/doc/shai
          cp target/release/shai pkgroot/usr/bin/shai
          [ -f LICENSE ] && cp LICENSE pkgroot/usr/share/doc/shai/ || true

      - name: Build .deb (fpm)
        run: |
          fpm -s dir -t deb \
            -n shai -v "${{ steps.v.outputs.version }}" \
            --license "Apache-2.0" \
            --vendor "OVHcloud" \
            --url "https://github.com/ovh/shai" \
            --description "SHAI CLI (Shell AI) - terminal assistant" \
            --depends "libssl3" --depends "libstdc++6" --depends "libgcc-s1" \
            -C pkgroot .
          ls -l *.deb

      - name: Lint .deb (lintian)
        run: |
          set -e
          lintian --pedantic --no-tag-display-limit ./*.deb | tee lintian.txt
          ! grep -q '^E: ' lintian.txt

      - name: SBOM (CycloneDX) + checksums
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
          /usr/local/bin/syft packages file:target/release/shai -o cyclonedx-json > sbom-deb-cyclonedx.json
          sha256sum ./*.deb sbom-deb-cyclonedx.json > SHA256SUMS.deb.txt

      - name: Upload artifacts (for CI browsing)
        uses: actions/upload-artifact@v4
        with:
          name: deb-${{ steps.v.outputs.version }}
          path: |
            ./*.deb
            sbom-deb-cyclonedx.json
            SHA256SUMS.deb.txt
          if-no-files-found: error

      - name: Upload to Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            *.deb
            sbom-deb-cyclonedx.json
            SHA256SUMS.deb.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  rpm:
    name: Build .rpm (RHEL ${{ matrix.el.name }}) + lint + SBOM + checksums
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        el:
          - { name: "el9",  image: "registry.access.redhat.com/ubi9/ubi:latest" }
          - { name: "el10", image: "registry.access.redhat.com/ubi10/ubi:latest" }

    # TOUT le job s’exécute dans UBI (dnf/dnf5)
    container:
      image: ${{ matrix.el.image }}

    steps:
      - uses: actions/checkout@v4

      - name: Prepare build environment (dnf/dnf5)
        shell: bash
        run: |
          set -euo pipefail
          PM=dnf
          command -v dnf5 >/dev/null 2>&1 && PM=dnf5
          echo "Using $PM on $(cat /etc/redhat-release || echo unknown)"
          $PM -y update || true
          $PM -y groupinstall "Development Tools"
          $PM -y install \
            git curl which ca-certificates \
            openssl-devel pkgconf-pkg-config \
            ruby ruby-devel rubygems \
            rpm-build redhat-rpm-config \
            jq file
          gem install --no-document fpm

      - name: Install Rust ${{ env.RUST_TOOLCHAIN }}
        shell: bash
        run: |
          curl -sSf https://sh.rustup.rs | sh -s -- -y --profile minimal --default-toolchain ${RUST_TOOLCHAIN}
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          rustc -V && cargo -V

      - name: Build shai (release)
        shell: bash
        run: cargo build --release -p shai-cli

      - name: Compute version
        id: v
        shell: bash
        run: |
          V=$(cargo metadata --format-version 1 | jq -r '.packages[] | select(.name=="shai-cli") | .version')
          echo "version=$V" >> "$GITHUB_OUTPUT"

      - name: Stage files
        shell: bash
        run: |
          mkdir -p pkgroot/usr/bin pkgroot/usr/share/licenses/shai
          cp target/release/shai pkgroot/usr/bin/shai
          [ -f LICENSE ] && cp LICENSE pkgroot/usr/share/licenses/shai/LICENSE || true

      - name: Build .rpm (fpm)
        shell: bash
        run: |
          fpm -s dir -t rpm \
            -n shai -v "${{ steps.v.outputs.version }}" \
            --license "Apache-2.0" \
            --vendor "OVHcloud" \
            --url "https://github.com/ovh/shai" \
            --description "SHAI CLI (Shell AI) - terminal assistant" \
            --depends "openssl-libs" --depends "libstdc++" --depends "glibc" \
            -C pkgroot .
          ls -l *.rpm

      - name: (Optional) rpmlint if available
        shell: bash
        run: |
          if command -v rpmlint >/dev/null 2>&1; then
            rpmlint *.rpm | tee rpmlint.txt || true
            ! grep -q '^E: ' rpmlint.txt || (echo "rpmlint errors found" && exit 1)
          else
            echo "rpmlint not available in this UBI image — skipping."
          fi

      - name: SBOM (CycloneDX) + checksums
        shell: bash
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
          /usr/local/bin/syft packages file:target/release/shai -o cyclonedx-json > sbom-${{ matrix.el.name }}-cyclonedx.json
          sha256sum ./*.rpm sbom-${{ matrix.el.name }}-cyclonedx.json > SHA256SUMS.${{ matrix.el.name }}.txt

      - name: Upload artifacts (for CI browsing)
        uses: actions/upload-artifact@v4
        with:
          name: rpm-${{ steps.v.outputs.version }}-${{ matrix.el.name }}
          path: |
            ./*.rpm
            sbom-${{ matrix.el.name }}-cyclonedx.json
            SHA256SUMS.${{ matrix.el.name }}.txt
          if-no-files-found: error

      - name: Upload to Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ./*.rpm
            sbom-${{ matrix.el.name }}-cyclonedx.json
            SHA256SUMS.${{ matrix.el.name }}.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  msi:
    name: Build .msi (Windows) + checksums (+ signing optionnel)
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust 1.86 (MSVC)
        shell: pwsh
        run: |
          & curl -sSf https://sh.rustup.rs | sh -s -- -y --profile minimal --default-toolchain 1.86.0
          "$env:USERPROFILE\.cargo\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding ascii -Append
          rustc -V; cargo -V

      - name: Build shai.exe (release)
        shell: pwsh
        run: |
          cargo build --release -p shai-cli
          Get-Item .\target\release\shai.exe | Format-List *

      - name: Compute version
        id: v
        shell: pwsh
        run: |
          $meta = cargo metadata --format-version 1 --no-deps | ConvertFrom-Json
          $ver = ($meta.packages | Where-Object { $_.name -eq "shai-cli" }).version
          "version=$ver" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding ascii -Append

      - name: Install WiX Toolset
        shell: pwsh
        run: |
          choco install wixtoolset --version=3.14.0 -y --no-progress
          $wix = Get-ChildItem 'C:\Program Files (x86)\WiX Toolset*' | Sort-Object FullName -Descending | Select-Object -First 1
          "WIX=$($wix.FullName)" | Out-File -FilePath $env:GITHUB_ENV -Encoding ascii -Append

      - name: Author MSI (WXS)
        shell: pwsh
        run: |
          $Version='${{ steps.v.outputs.version }}'
          $UpgradeCode='6f8570e8-6024-4a2f-9946-0c2e6213d9a3'  # constant pour upgrades
          @"
<?xml version="1.0" encoding="UTF-8"?>
<Wix xmlns="http://schemas.microsoft.com/wix/2006/wi">
  <Product Id="*" Name="SHAI" Language="1033" Version="$Version" Manufacturer="OVHcloud" UpgradeCode="$UpgradeCode">
    <Package InstallerVersion="500" Compressed="yes" InstallScope="perMachine" />
    <MajorUpgrade AllowDowngrades="no" DowngradeErrorMessage="A newer version is already installed." />
    <MediaTemplate />
    <Feature Id="Main" Title="SHAI" Level="1">
      <ComponentGroupRef Id="AppFiles" />
    </Feature>
  </Product>
  <Fragment>
    <Directory Id="TARGETDIR" Name="SourceDir">
      <Directory Id="ProgramFilesFolder">
        <Directory Id="INSTALLFOLDER" Name="SHAI" />
      </Directory>
      <Directory Id="ProgramMenuFolder" />
    </Directory>
  </Fragment>
  <Fragment>
    <ComponentGroup Id="AppFiles" Directory="INSTALLFOLDER">
      <Component Id="cmpShaiExe" Guid="*">
        <File Id="shaiExe" Source="$(var.BinDir)\shai.exe" KeyPath="yes" />
        <Environment Id="PATH_SHAI" Name="PATH" Action="set" Part="last" System="yes" Permanent="no" Value="[INSTALLFOLDER]" />
      </Component>
    </ComponentGroup>
  </Fragment>
</Wix>
"@ | Set-Content -Path shai.wxs -Encoding UTF8

      - name: Compile & link (WiX)
        shell: pwsh
        run: |
          & "$env:WIX\bin\candle.exe" -dBinDir="target\release" -ext WixUtilExtension shai.wxs -o shai.wixobj
          & "$env:WIX\bin\light.exe"  -ext WixUtilExtension shai.wixobj -o "shai-${{ steps.v.outputs.version }}-x86_64.msi"
          Get-ChildItem *.msi

      - name: Optional code signing
        if: ${{ secrets.SIGNING_CERT_B64 != '' && secrets.SIGNING_CERT_PASS != '' }}
        shell: pwsh
        run: |
          $pfx = "$env:RUNNER_TEMP\codesign.pfx"
          [IO.File]::WriteAllBytes($pfx, [Convert]::FromBase64String("${{ secrets.SIGNING_CERT_B64 }}"))
          $signtool = (Get-ChildItem "C:\Program Files (x86)\Windows Kits\10\bin\**\signtool.exe" -ErrorAction SilentlyContinue | Select-Object -Last 1).FullName
          & $signtool sign /f $pfx /p "${{ secrets.SIGNING_CERT_PASS }}" /fd SHA256 /tr http://timestamp.digicert.com /td SHA256 "shai-${{ steps.v.outputs.version }}-x86_64.msi"

      - name: Checksums
        shell: pwsh
        run: |
          Get-FileHash -Path "shai-${{ steps.v.outputs.version }}-x86_64.msi" -Algorithm SHA256 | ForEach-Object {
            "$($_.Hash)  $($_.Path)" } | Set-Content -Path SHA256SUMS.msi.txt -Encoding ascii
          Get-Content SHA256SUMS.msi.txt

      - name: Upload artifacts (for CI browsing)
        uses: actions/upload-artifact@v4
        with:
          name: msi-${{ steps.v.outputs.version }}
          path: |
            shai-${{ steps.v.outputs.version }}-x86_64.msi
            SHA256SUMS.msi.txt
          if-no-files-found: error

      - name: Upload to Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            shai-${{ steps.v.outputs.version }}-x86_64.msi
            SHA256SUMS.msi.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
