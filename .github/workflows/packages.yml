name: packages

on:
  push:
    tags: [ "v*.*.*" ]      # publication officielle: attache à la Release
  workflow_dispatch: {}     # test manuel

permissions:
  contents: write

env:
  RUST_TOOLCHAIN: "1.86.0"

concurrency:
  group: packages-${{ github.ref }}
  cancel-in-progress: true

# ────────────────────────────────────────────────────────────────────────────────
#  .deb — build DANS les conteneurs des distros (Ubuntu 22.04 & Debian 12)
# ────────────────────────────────────────────────────────────────────────────────
jobs:
  deb:
    name: deb (${{ matrix.deb.name }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        deb:
          - { name: "ubuntu-22.04", image: "ubuntu:22.04" }   # glibc 2.35 → compatible + large
          - { name: "debian-12",   image: "debian:12" }       # bookworm (glibc 2.36)
    container:
      image: ${{ matrix.deb.image }}

    steps:
      - uses: actions/checkout@v4

      - name: Install toolchain & packagers
        run: |
          set -euo pipefail
          export DEBIAN_FRONTEND=noninteractive
          apt-get update
          apt-get install -y --no-install-recommends \
            build-essential pkg-config libssl-dev \
            ruby ruby-dev rubygems gcc make \
            jq curl file lintian ca-certificates git
          gem install --no-document fpm
          update-ca-certificates || true

      - name: Install Rust ${{ env.RUST_TOOLCHAIN }}
        run: |
          curl -sSf https://sh.rustup.rs | sh -s -- -y --profile minimal --default-toolchain ${RUST_TOOLCHAIN}
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          rustc -V && cargo -V

      - name: Build shai (release)
        run: cargo build --release -p shai-cli

      - name: Compute version
        id: v
        run: |
          V=$(cargo metadata --format-version 1 | jq -r '.packages[] | select(.name=="shai-cli") | .version')
          echo "version=$V" >> "$GITHUB_OUTPUT"

      - name: Stage & build .deb
        env:
          DISTRO: ${{ matrix.deb.name }}
          VER: ${{ steps.v.outputs.version }}
        run: |
          set -e
          mkdir -p pkgroot/usr/bin pkgroot/usr/share/doc/shai
          cp target/release/shai pkgroot/usr/bin/shai
          [ -f LICENSE ] && cp LICENSE pkgroot/usr/share/doc/shai/ || true

          fpm -s dir -t deb \
            -n shai -v "$VER" \
            --license "Apache-2.0" \
            --vendor "OVHcloud" \
            --url "https://github.com/ovh/shai" \
            --description "SHAI CLI (Shell AI) - terminal assistant" \
            --depends "libssl3" --depends "libstdc++6" --depends "libgcc-s1" \
            -C pkgroot .

          OUT=out && mkdir -p "$OUT"
          DEB=$(ls *.deb | head -n1)
          mv "$DEB" "$OUT/shai_${VER}_${DISTRO}_amd64.deb"

          # Lint
          lintian --pedantic --no-tag-display-limit "$OUT/"*.deb | tee "$OUT/lintian.${DISTRO}.txt" || true
          # SBOM + checksums
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
          /usr/local/bin/syft packages file:target/release/shai -o cyclonedx-json > "$OUT/sbom-${DISTRO}-cyclonedx.json"
          (cd "$OUT" && sha256sum * > "SHA256SUMS.${DISTRO}.txt")
          ls -l "$OUT"

      - name: Upload deb artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deb-${{ steps.v.outputs.version }}-${{ matrix.deb.name }}
          path: out/*
          if-no-files-found: error

# ────────────────────────────────────────────────────────────────────────────────
#  .rpm — build DANS UBI9 et UBI10 (RHEL)
# ────────────────────────────────────────────────────────────────────────────────
  rpm:
    name: rpm (${{ matrix.el.name }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        el:
          - { name: "el9",  image: "registry.access.redhat.com/ubi9/ubi:latest" }
          - { name: "el10", image: "registry.access.redhat.com/ubi10/ubi:latest" }
    container:
      image: ${{ matrix.el.image }}

    steps:
      - uses: actions/checkout@v4

      - name: Prepare build env (dnf/dnf5)
        run: |
          set -euo pipefail
          PM=dnf; command -v dnf5 >/dev/null 2>&1 && PM=dnf5
          $PM -y update || true
          $PM -y groupinstall "Development Tools"
          $PM -y install git curl which ca-certificates \
                         openssl-devel pkgconf-pkg-config \
                         ruby ruby-devel rubygems \
                         rpm-build redhat-rpm-config jq file
          gem install --no-document fpm

      - name: Install Rust ${{ env.RUST_TOOLCHAIN }}
        run: |
          curl -sSf https://sh.rustup.rs | sh -s -- -y --profile minimal --default-toolchain ${RUST_TOOLCHAIN}
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          rustc -V && cargo -V

      - name: Build shai (release)
        run: cargo build --release -p shai-cli

      - name: Compute version
        id: v
        run: |
          V=$(cargo metadata --format-version 1 | jq -r '.packages[] | select(.name=="shai-cli") | .version')
          echo "version=$V" >> "$GITHUB_OUTPUT"

      - name: Stage & build .rpm
        env:
          EL: ${{ matrix.el.name }}
          VER: ${{ steps.v.outputs.version }}
        run: |
          set -e
          mkdir -p pkgroot/usr/bin pkgroot/usr/share/licenses/shai
          cp target/release/shai pkgroot/usr/bin/shai
          [ -f LICENSE ] && cp LICENSE pkgroot/usr/share/licenses/shai/LICENSE || true

          fpm -s dir -t rpm \
            -n shai -v "$VER" \
            --license "Apache-2.0" \
            --vendor "OVHcloud" \
            --url "https://github.com/ovh/shai" \
            --description "SHAI CLI (Shell AI) - terminal assistant" \
            --depends "openssl-libs" --depends "libstdc++" --depends "glibc" \
            -C pkgroot .

          OUT=out && mkdir -p "$OUT"
          RPM=$(ls *.rpm | head -n1)
          mv "$RPM" "$OUT/shai-${VER}-${EL}.x86_64.rpm"

          # rpmlint si dispo
          if command -v rpmlint >/dev/null 2>&1; then
            rpmlint "$OUT/"*.rpm | tee "$OUT/rpmlint.${EL}.txt" || true
          fi
          # SBOM + checksums
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
          /usr/local/bin/syft packages file:target/release/shai -o cyclonedx-json > "$OUT/sbom-${EL}-cyclonedx.json"
          (cd "$OUT" && sha256sum * > "SHA256SUMS.${EL}.txt")
          ls -l "$OUT"

      - name: Upload rpm artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rpm-${{ steps.v.outputs.version }}-${{ matrix.el.name }}
          path: out/*
          if-no-files-found: error

# ────────────────────────────────────────────────────────────────────────────────
#  MSI — runner Windows (MSVC)
# ────────────────────────────────────────────────────────────────────────────────
  msi:
    name: msi (Windows)
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust 1.86 (MSVC)
        shell: pwsh
        run: |
          & curl -sSf https://sh.rustup.rs | sh -s -- -y --profile minimal --default-toolchain 1.86.0
          "$env:USERPROFILE\.cargo\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding ascii -Append
          rustc -V; cargo -V

      - name: Build shai.exe (release)
        shell: pwsh
        run: cargo build --release -p shai-cli

      - name: Compute version
        id: v
        shell: pwsh
        run: |
          $meta = cargo metadata --format-version 1 --no-deps | ConvertFrom-Json
          $ver = ($meta.packages | Where-Object { $_.name -eq "shai-cli" }).version
          "version=$ver" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding ascii -Append

      - name: Install WiX Toolset
        shell: pwsh
        run: |
          choco install wixtoolset --version=3.14.0 -y --no-progress
          $wix = Get-ChildItem 'C:\Program Files (x86)\WiX Toolset*' | Sort-Object FullName -Descending | Select-Object -First 1
          "WIX=$($wix.FullName)" | Out-File -FilePath $env:GITHUB_ENV -Encoding ascii -Append

      - name: Author MSI (WXS)
        shell: pwsh
        run: |
          $Version='${{ steps.v.outputs.version }}'
          $UpgradeCode='6f8570e8-6024-4a2f-9946-0c2e6213d9a3'  # constant pour upgrades
          @"
<?xml version="1.0" encoding="UTF-8"?>
<Wix xmlns="http://schemas.microsoft.com/wix/2006/wi">
  <Product Id="*" Name="SHAI" Language="1033" Version="$Version" Manufacturer="OVHcloud" UpgradeCode="$UpgradeCode">
    <Package InstallerVersion="500" Compressed="yes" InstallScope="perMachine" />
    <MajorUpgrade AllowDowngrades="no" DowngradeErrorMessage="A newer version is already installed." />
    <MediaTemplate />
    <Feature Id="Main" Title="SHAI" Level="1">
      <ComponentGroupRef Id="AppFiles" />
    </Feature>
  </Product>
  <Fragment>
    <Directory Id="TARGETDIR" Name="SourceDir">
      <Directory Id="ProgramFilesFolder">
        <Directory Id="INSTALLFOLDER" Name="SHAI" />
      </Directory>
      <Directory Id="ProgramMenuFolder" />
    </Directory>
  </Fragment>
  <Fragment>
    <ComponentGroup Id="AppFiles" Directory="INSTALLFOLDER">
      <Component Id="cmpShaiExe" Guid="*">
        <File Id="shaiExe" Source="$(var.BinDir)\shai.exe" KeyPath="yes" />
        <Environment Id="PATH_SHAI" Name="PATH" Action="set" Part="last" System="yes" Permanent="no" Value="[INSTALLFOLDER]" />
      </Component>
    </ComponentGroup>
  </Fragment>
</Wix>
"@ | Set-Content -Path shai.wxs -Encoding UTF8

      - name: Compile & link (WiX)
        shell: pwsh
        run: |
          & "$env:WIX\bin\candle.exe" -dBinDir="target\release" -ext WixUtilExtension shai.wxs -o shai.wixobj
          & "$env:WIX\bin\light.exe"  -ext WixUtilExtension shai.wixobj -o "shai-${{ steps.v.outputs.version }}-x86_64.msi"

      - name: Checksums
        shell: pwsh
        run: |
          mkdir out
          Move-Item "shai-${{ steps.v.outputs.version }}-x86_64.msi" out/
          Get-FileHash -Path "out/shai-${{ steps.v.outputs.version }}-x86_64.msi" -Algorithm SHA256 | ForEach-Object {
            "$($_.Hash)  $($_.Path)" } | Set-Content -Path out/SHA256SUMS.msi.txt -Encoding ascii
          Get-ChildItem out

      - name: Upload msi artifacts
        uses: actions/upload-artifact@v4
        with:
          name: msi-${{ steps.v.outputs.version }}
          path: out/*
          if-no-files-found: error

# ────────────────────────────────────────────────────────────────────────────────
#  Publication Release (hors conteneur) — rassemble tous les artefacts
# ────────────────────────────────────────────────────────────────────────────────
  publish:
    if: startsWith(github.ref, 'refs/tags/')
    name: Publish to Release
    runs-on: ubuntu-latest
    needs: [deb, rpm, msi]
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: '*'
          merge-multiple: true
          path: dist

      - name: List dist
        run: ls -Rlh dist

      - name: Attach to Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
